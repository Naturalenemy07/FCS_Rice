# Use CodeSkulptor to run. http://www.codeskulptor.org/
# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
player_message = ""
score_message = "Score: "
score = 0
global_deck = []
player_hand = []
dealer_hand = []

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
        if in_play == True:
            canvas.draw_image(card_back, (144/4, 96/2), CARD_SIZE, [85, 248] ,CARD_SIZE) 
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []
        
    def __str__(self):
        card_str = ""
        for i in self.cards:
            card_str += str(i) + " "
        return card_str
    
    def add_card(self,card):
        self.cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        
        total_value = 0
        
        for i in self.cards:
            total_value += VALUES[str(i.get_rank())]

        card_str = ""
            
        # converts list to string, searches for Ace
        for i in self.cards:
            card_str += str(i) + " "

        # if it doesn't find an Ace in the hand (returns -1)
        if card_str.find('A') == -1:
            return total_value
        
        else:
            if total_value + 10 <= 21:
                total_value += 10
                return total_value
            else:
                return total_value            
   
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards        
        for c in self.cards:
            c.draw(canvas, pos)
            pos[0] += CARD_SIZE[0]*1.25
             
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                self.deck.append(Card(suit, rank))

    def shuffle(self):
        random.shuffle(self.deck)

    def deal_card(self):
        self.dealt_card = self.deck.pop()
        return self.dealt_card
        
    
    def __str__(self):
        deck_str = ""
        for i in self.deck:
            deck_str += str(i) + " "
        return "Deck Contains: " + deck_str

#define event handlers for buttons
def deal():
    global outcome, in_play, player_message, score
    global global_deck, player_hand, dealer_hand
    
    if in_play == True:
        player_message = "You lost because you pressed Deal mid-round!"
        outcome = "New Deal?"
        score -= 1
        
    global_deck = Deck()
    player_hand = Hand()
    dealer_hand = Hand()
    
    if in_play == False:
        player_message = ""
    outcome = "Hit or Stand?"
    
    global_deck.shuffle()
    player_hand.add_card(global_deck.deal_card())
    dealer_hand.add_card(global_deck.deal_card())
    player_hand.add_card(global_deck.deal_card())
    dealer_hand.add_card(global_deck.deal_card())

    print "Player: " + str(player_hand)
    print "Dealer: " + str(dealer_hand)
    
    in_play = True

def hit():    
    # replace with your code below
    global in_play, outcome, score, player_message, score_message
    
    if in_play == False:
        player_message = "The Game is Over, Press Deal to Start a New Game."
        return
 
    if in_play == True:
        if player_hand.get_value() <= 21:
            player_hand.add_card(global_deck.deal_card())
            print "Player: " + str(player_hand)
            if player_hand.get_value() > 21:
                score -= 1
                outcome = "You Lost, New Deal?"
                player_message = "You Have Busted!"
                in_play = False
       
def stand():
    ##need to rewrite this code, it sometimes adds two points if i win, and says I lose when I actually win....
    global outcome, in_play, score, score_message, player_message
    
    if in_play == False:
        player_message = "The Game is Over, Press Deal to Start a New Game."
        return
   
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play == True:
        while dealer_hand.get_value() < 17:
            outcome = ""
            dealer_hand.add_card(global_deck.deal_card())
                    
    # assign a message to outcome, update in_play and score
        if dealer_hand.get_value() > 21:
            player_message = "Dealer Busted, You Won!"
            outcome = "New Deal?"
            score += 1
    
        elif dealer_hand.get_value() >= player_hand.get_value():
            player_message = "You Lost!"
            outcome = "New Deal?"
            score -= 1
                
        else:
            player_message = "You Won!"
            outcome = "New Deal?"
            score += 1
        in_play = False
    
# draw handler    
def draw(canvas):
    player_hand.draw(canvas, [50, 400])
    dealer_hand.draw(canvas, [50, 200])
    
    canvas.draw_text(player_message, [133, 380], 20, 'Yellow')
    canvas.draw_text(score_message + str(score), [300, 550], 25, 'White')
    canvas.draw_text("Dealer", [53, 180], 25, 'White')
    canvas.draw_text("Player", [53, 380], 25, 'White')
    canvas.draw_text(outcome, [53, 550], 25, 'Cyan')
    canvas.draw_text("Blackjack", [230, 50], 40, 'Black')
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

global_deck = Deck()

# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
